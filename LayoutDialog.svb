'USEUNIT CommonFunction

'===============================================================================
' Sub: SLDRowsChecking
'   Checks all the rows in the list of layout.
'
' Description:
'   Checks all the rows in the list of layout.
'
' Parameters:
'   Object -  objDialog : Dialog object
' 
'===============================================================================
Sub SLDRowsChecking(objDialog)
  
  On Error Resume Next 
    Log.AppendFolder("Checking all the rows in the list of layout.")
      Indicator.PushText("Checking all the rows in the list of layout.")
    
      Set TableList = HTML.FindChildMethods.FromParent_Proximity1(objDialog, "idStr", "qadLDLayoutList", 2)

      Dim i, TableValues

      TableValues = SLDParseTable(TableList)

      Log.AppendFolder("Validation the active column of each item")
        For i = 0 To UBound(TableValues)
          ActiveColumnChecking(TableValues(i))
        Next
      Log.PopLogFolder

      Log.AppendFolder("Validation the layout column of each item")
        For i = 0 To UBound(TableValues)
          LayoutColumnChecking(TableValues(i))
        Next
      Log.PopLogFolder

      Indicator.PopText
    Log.PopLogFolder
      
End sub

'===============================================================================
' Sub: SLDContinueChecking
'   Checks if the correct target after the submmit.
'
' Description: 
'   Checks if the correct target after the submmit.
'   
' Parameters:
'   String -  strIdDialog : Dialog id
'   String -  strMenuItem : Name of the menu
'   Integer    -  CheckingType : Type of the checking
'              -  1 : Check only first item in the list
'              -  2 : Check first item in the each of list category
'              -  3 : Check each of items
'   
'===============================================================================
Sub SLDContinueChecking(strIdDialog, strMenuItem, CheckingType)

  On Error Resume Next 
    Log.AppendFolder("Checks if the correct target after the submmit.")
      Indicator.PushText("Checks if the correct target after the submmit.")


      Set objDialog = FindDialog(strIdDialog)
      Set TableList = HTML.FindChildMethods.FromParent_Proximity1(objDialog, "idStr", "qadLDLayoutList", 2)
      Set TableContainer = TableList.parentElement

      Dim i, TableValues, CellNumber
      CellNumber = 1

      TableValues = SLDParseTable(TableList)

      Select Case CheckingType
      ' check one item
        Case 1
          Set btnName = HTML.ButtonQAD.FindButton_Proximity3(objDialog, "qadLDSubmitBtn")
          Call HTML.ButtonQAD.ClickBtn(btnName)

          Set page = Sys.Browser("*").Page("*")
          If CheckSelectedLayout(UrlDecode(page.URL), TableValues(i)(1,0)) Then
            Log.Event("Target is CORRECT")
          Else 
            Log.Warning("Target is NOT CORRECT")
          End if
        ' Check first item in the each of list category
        Case 2
          For i = 0 To UBound(TableValues)
            Log.AppendFolder("check one item in each category "&i)
              Set TableRow = TableList.Cell(CellNumber, 0)
              Call CommonFunction.ScrollDown(TableContainer, TableRow)
              TableRow.Click
              Set btnName = HTML.ButtonQAD.FindButton_Proximity3(objDialog, "qadLDSubmitBtn")
              Call HTML.ButtonQAD.ClickBtn(btnName)
              AqUtils.Delay 100
              If NOT objDialog.Exists Then 
                Log.Checkpoint("Select Layout Dialog is CLOSED")
              Else 
                Log.Warning("Select Layout Dialog is NOT CLOSED")
              End If
              Set page = Sys.Browser("*").Page("*")
              If CheckSelectedLayout(UrlDecode(page.URL), TableValues(i)(1,0)) Then
                Log.Event("Target is CORRECT")
              Else 
                Log.Warning("Target is NOT CORRECT")
              End if
              If UBound(TableValues) <> i Then
                AqUtils.Delay 250
                Call NavToSLDialogFromEditor()
                Set objDialog = FindDialog(strIdDialog)
                CellNumber = CellNumber + UBound(TableValues(i)) + 1
              End if
            Log.PopLogFolder
          Next
        ' Check each of items
        Case 3
          For i = 0 To UBound(TableValues)
            For j = 1 To UBound(TableValues(i))
              Log.AppendFolder("check one item in each category "&i&" item "&j)

                Set TableRow = TableList.Cell(CellNumber, 0)
                Call CommonFunction.ScrollDown(TableContainer, TableRow)
                TableRow.Click
                If NOT objDialog.Exists Then 
                  Log.Message("objDialog is NOT Exists")
                End if
                Set btnName = HTML.ButtonQAD.FindButton_Proximity3(objDialog, "qadLDSubmitBtn")
                Call HTML.ButtonQAD.ClickBtn(btnName)
                
                AqUtils.Delay 100
                
                If NOT objDialog.Exists Then 
                  Log.Checkpoint("Select Layout Dialog is CLOSED")
                Else 
                  Log.Warning("Select Layout Dialog is NOT CLOSED")
                End If
                
                Set page = Sys.Browser("*").Page("*")
                If CheckSelectedLayout(UrlDecode(page.URL), TableValues(i)(j,0)) Then
                  Log.Event("Target is CORRECT")
                Else 
                  Log.Warning("Target is NOT CORRECT")
                End if
                
                CellNumber = CellNumber + 1
                Call NavToSLDialogFromEditor()
                Set objDialog = FindDialog(strIdDialog)
              Log.PopLogFolder
            Next

            CellNumber = CellNumber + 1
          Next

        Case Else
          Log.Error = "Wrong CheckingType!"
      End Select

      Indicator.PopText
    Log.PopLogFolder
End sub

'===============================================================================
' Sub: ActiveColumnChecking
'   Checking the absence of values and duplication "Yes".
' 
' Description:
'   Checking the absence of values and duplication "Yes".
' 
' Parameters:
'   Array - arrTBody : array of the rows in TBODY.
'
'===============================================================================
Sub ActiveColumnChecking(arrTBody)

  Dim i, tempActive
  
  checkEr = false
  tempActive = "No"

  For i = 1 to UBound(arrTBody, 1) - 1
    ' Check for the absence of value.
    If arrTBody(i, 2) <> "" Then
      ' Check for duplicate "Yes".
      If arrTBody(i, 2) = "Yes" Then
        if tempActive = "Yes" Then
          checkEr = true
          Exit For
        Else
          tempActive = "Yes"
        End if
      End If
    Else
      checkEr = true
      Exit For
    End If
  Next
  
  ' Check for at least one Yes-active in "System".
  If (arrTBody(0, 0) = "System") and (tempActive = "No") Then
    checkEr = true
  End if

  If checkEr = true Then
    Log.Warning(arrTBody(0, 0) & " is FAIL")
  Else
    Log.Checkpoint(arrTBody(0, 0) & " is DONE")
  End If

End Sub

'===============================================================================
' Sub: LayoutColumnChecking
' 
' Description:
'   Checking the absence of values.
' 
' Parameters:
'   Array - arrTBody : array of the rows in TBODY.
'
'===============================================================================
Sub LayoutColumnChecking(arrTBody)
  
  Dim i, tempActive
  
  checkEr = false

  For i = 1 to UBound(arrTBody, 1) - 1
    ' Check for the absence of value.
    If arrTBody(i, 2) = "" Then
      checkEr = true
      Exit For
    End If
  Next

  If checkEr = true Then
    Log.Warning(arrTBody(0, 0) & " is FAIL")
  Else
    Log.Checkpoint(arrTBody(0, 0) & " is DONE")
  End If

End Sub

'===============================================================================
' Function: SLDParseTable
'   Parse TABLE
' 
' Parameters:
'   Object - objTable : TABLE object
' 
' Returns: 
'   Array(Array(n,2), Array(n,2)... ) - array of arrays TBODY.
'===============================================================================
Function SLDParseTable(objTable)

  Dim i
  ReDim TableValues(objTable.tBodies.length - 1)
  ' Parses the TBODY elements
  For i = 0 To objTable.tBodies.length - 1
    TableValues(i) = SLDParseTableBody(objTable.tBodies.item(i))
  Next

  SLDParseTable = TableValues
  
End Function

'===============================================================================
' Function: SLDParseTableBody
'   Parse TBODY
' 
' Parameters:
'   Object - objTableBody : TBODY object
' 
' Returns: 
'   Array(n,2) - array of all the rows in TBODY object.
'===============================================================================
Function SLDParseTableBody(objTableBody)
  
  Dim i, j, row
  ReDim TBodyValues(objTableBody.rows.length - 1, 2)
  
  ' Goes through rows
  For i = 0 To objTableBody.rows.length - 1
    ' Obtains a row
    Set row = objTableBody.rows.item(i)
    
    TBodyValues(i, 0) = Trim(row.cells.item(0).innerText)
    if i > 0 Then
      TBodyValues(i, 1) = Trim(row.cells.item(1).innerText)
      TBodyValues(i, 2) = Trim(row.cells.item(2).innerText)
    End if
  Next

  SLDParseTableBody = TBodyValues

End function

'===============================================================================
' Sub: ClickDlgBtn
'  Click the button in the Dialog. (OK, Delete, Continue, Cancel etc)
'
' Description:  
'  Click the button in the Dialog. (OK, Delete, Continue, Cancel etc)
'
' Parameters:
'   Object - objDialog : Dialog object
'   String - strIDButton : Pass idStr of the button you want to click 
' 
'===============================================================================
Sub ClickDlgBtn(objDialog, strIDButton)

  On Error Resume Next
  Log.AppendFolder("Click the '"& strIDButton &"' button in the dialog window")
    Indicator.PushText("Click the "& strIDButton &" button in the dialog window")
    
    Set btnObject = HTML.ButtonQAD.FindButton_Proximity3(objDialog, strIDButton)

    If btnObject.Exists then
      If NOT btnObject.Enabled Then 
         AqUtils.Delay 250
      End if
      If Not btnObject.VisibleOnScreen Then
        Log.Message("Focus the "& strIDButton &" button") 
        Call btnObject.Focus
        AqUtils.Delay 100
        Call btnObject.Click
        AqUtils.Delay 250
        Call HTML.UtilsQAD.DelayForPageLoad
      Else
        Log.Message("Click the "& strIDButton &" button")
        AqUtils.Delay 100
        Call btnObject.Click 
        AqUtils.Delay 250
        Call HTML.UtilsQAD.DelayForPageLoad 
      End if
    Else 
      Log.Warning("Cannot find the button: " & strIDButton)
    End If 
    
    'Error Handling
    If Err.Number <> 0 Then 
      Log.Error("Error encountered: Source: " & Err.Source & " Description: " & Err.Description)
      Err.Clear
    End if 
  
    Indicator.PopText
  log.PopLogFolder
  
End Sub

'===============================================================================
' Function:  FindDialog
'    Find the dialog Object 
'
' Description:  
'   Finds the dialog Object and returns it  
' 
' Parameters:
'   String - DialogIdStr : Pass idStr of the Dialog you want to check
' 
' Returns: 
'   Object - Dialog object     
' 
'===============================================================================
Function FindDialog(DialogIdStr)
  
  On Error Resume Next
  Log.AppendFolder("Finds the Dialog Object")
    Indicator.PushText("Finds the Dialog Object")
    
    Call Aliases.browser.WaitPage("http*", 120000)
    set objPage = Aliases.browser.page
    
    Log.Enabled = False 
    
   'Logic to wait for the page objects to load 
    If aqObject.IsSupported(objPage , "contentDocument") = False Then 
      Log.Message("Delay for content document to load")
      AQUtils.Delay 5000
    End If 
    
    If aqObject.IsSupported(objPage.contentDocument, "body") = False Then 
      Log.Message("Delay for body to load")
      AQUtils.Delay 5000
    End If 
    
    If aqObject.IsSupported(objPage.contentDocument.body, "children") = False Then 
      Log.Message("Delay for children to load")
      AQUtils.Delay 5000
    End If 
    
    set objPage = Aliases.browser.page

    set objDialog = HTML.FindChildMethods.FromParent_Proximity1(objPage, "idStr", DialogIdStr, 2)
    
    Log.Enabled = True
    If Not objDialog.Exists Then
      Log.Message("Dialog is not on the screen, cannot perform click Cancel on it")
      Set FindDialog = objDialog
      Indicator.PopText
      Log.PopLogFolder
      Exit Function
    
    End iF 
    Log.Enabled = False
    Set FindDialog = objDialog
    
    'Error Handling
    If Err.Number <> 0 Then 
      Log.Error("Error encountered: Source: " & Err.Source & " Description: " & Err.Description)
      Log.Message("Error encountered: Source: " & Err.Source & " Description: " & Err.Description)
      Err.Clear
    End if 
   
    Log.Enabled = True
     
    Indicator.PopText
  Log.PopLogFolder

End Function

'===============================================================================
' Function: CheckSelectedLayout
'   Checking whether we are on the layout editor.
'
' Description:  
'   Checking whether we are on the layout editor.
'
' Parameters:
'   String - url : URL
'   String - strLayoutName : Correct Layout Name
' 
' Returns: 
'   Boolean - True  : if selected layout name is correct, 
'             Flase : if selected layout name isn't correct
' 
'===============================================================================
Function CheckSelectedLayout(url, strLayoutName)
  
  Dim LayoutName, ParPos
  ParPos = CheckOnEditor(url)

  If CheckOnEditor(url) <> 0 Then
    LayoutName = Right(url, Len(url) - ParPos + 1)
    If strLayoutName = Replace(LayoutName, "layoutName=", "") Then
      CheckSelectedLayout = True
    Else
      CheckSelectedLayout = False
    End if
  Else
    Log.Message("Checking whether we are on the layout editor.")
  End if

End Function

'===============================================================================
' Function: CheckOnEditor
'  Checking whether we are on the layout editor.
'
' Description:  
'  Checking whether we are on the layout editor.
'
' Parameters:
'   String - URL : which you want to check.
' 
' Returns: 
'   Integer - 0 : If we are on a different page 
'         other number : if we are on a layout editor page, 
' 
'===============================================================================
Function CheckOnEditor(url)
  Dim ParPos

  ParPos = InStrRev(url, "layoutName")

  CheckOnEditor = ParPos

End Function

'===============================================================================
' Sub: NavToSLDialogFromEditor
'  Opens the "Select design layout" dialog.
'
' Description:  
'  Opens the "Select design layout" dialog.
'
' Parameters:
'   String - strMenuItem : Menu item name
'   Object - objDialog : Dialog Object
' 
'===============================================================================
Sub NavToSLDialogFromEditor()
  
  Log.AppendFolder("NavToSLDialogFromEditor")
      Set page = Sys.Browser("*").Page("*")
      Set qMainContainer = HTML.FindChildMethods.FromParent_Proximity1(page, "idStr", "qMainContainer", 2)
      Set QADViewContainer = HTML.FindChildMethods.FromParent_Proximity1(qMainContainer, "idStr", "QADViewContainer", 2)
      Set KToolBar_DesignToolbar = HTML.FindChildMethods.FromParent_Proximity1(QADViewContainer, "idStr", "KToolBar_DesignToolbar", 2)
      Set qSelectLayoutToolbarButton = HTML.FindChildMethods.FromParent_Proximity1(KToolBar_DesignToolbar, "idStr", "qSelectLayoutToolbarButton", 2)
      qSelectLayoutToolbarButton.Click
  Log.PopLogFolder

End sub