'USEUNIT CommonFunction

'===============================================================================
' Function:  GetLayoutRowNumber
'
' Description:  
'   
' Parameters:
'   Object - objTable : table object in which we are search.
'   String - strCreateForName : the name of the category in which you want to find item
'   String - strLayoutName : name of the item you want to find
'   Iteger - intColumn : number column with the name of layout
' 
' Returns: 
'   Integer - Row Number (0 if not found)
'           
'===============================================================================

Function GetLayoutRowNumber(objTable, strCreateForName, strLayoutName, intColumn)

  Log.AppendFolder("Get select layout dialog row number")

  intCategoryColumnNumber = 0

  For i = 0 To objTable.RowCount - 1 
    If (objTable.Cell(i, 0).colSpan = 3) AND InStr(objTable.Cell(i, 0).contentText, strCreateForName) Then
      intCategoryColumnNumber = i + 1
      Exit For
    Else
      If i = (objTable.RowCount - 1) Then
        Log.Message("Category " & strCreateForName & " not found ")
        GetLayoutRowNumber = 0
        Log.PopLogFolder
        Exit Function
      End If
    End if
  Next

  For i = intCategoryColumnNumber To objTable.RowCount - 1
    If objTable.Cell(i, 0).colSpan = 1 Then 
      If LCase(Trim(objTable.Cell(i, intColumn).innerText)) = LCase(strLayoutName) Then
        GetLayoutRowNumber = i
        Exit For
      Else
        If i = (objTable.RowCount - 1) Then
          Log.Message("Layout " & strCreateForName & " not found ")
          GetLayoutRowNumber = 0
        End if
      End if
    End if
  Next

  Log.PopLogFolder

End Function

'===============================================================================
' Function:  FindDialog
'    Find the dialog Object
'
' Description:
'   Finds the dialog Object and returns it  
' 
' Parameters:
'   String - DialogIdStr : Pass idStr of the Dialog you want to check
' 
' Returns: 
'   Object - Dialog object
' 
'===============================================================================
Function FindDialog(DialogIdStr)
  
  On Error Resume Next
  Log.AppendFolder("Finds the Dialog Object")
    Indicator.PushText("Finds the Dialog Object")
    
    Call Aliases.browser.WaitPage("http*", 120000)
    set objPage = Aliases.browser.page
     
    
   'Logic to wait for the page objects to load 
    If aqObject.IsSupported(objPage , "contentDocument") = False Then 
      Log.Message("Delay for content document to load")
      AQUtils.Delay 5000
    End If 
    
    If aqObject.IsSupported(objPage.contentDocument, "body") = False Then 
      Log.Message("Delay for body to load")
      AQUtils.Delay 5000
    End If 
    
    If aqObject.IsSupported(objPage.contentDocument.body, "children") = False Then 
      Log.Message("Delay for children to load")
      AQUtils.Delay 5000
    End If 
    
    set objPage = Aliases.browser.page

    set objDialog = HTML.FindChildMethods.FromParent_Proximity1(objPage, "idStr", DialogIdStr, 2)
    
    If objDialog.Exists Then
      Set FindDialog = objDialog
    Else
      Set FindDialog = objDialog
      Log.Warning("Dialog is not on the screen")
    End iF 
    
    'Error Handling
    If Err.Number <> 0 Then 
      Log.Error("Error encountered: Source: " & Err.Source & " Description: " & Err.Description)
      Log.Message("Error encountered: Source: " & Err.Source & " Description: " & Err.Description)
      Err.Clear
    End if 
   
     
    Indicator.PopText
  Log.PopLogFolder

End Function

'===============================================================================
' Sub: SLDRowsChecking
'   Checks all the rows in the list of layout.
'
' Description:
'   Checks all the rows in the list of layout.
'
' Parameters:
'   Object -  objDialog : Dialog object
' 
'===============================================================================
Sub SLDRowsChecking(objDialog)
  
  On Error Resume Next 
    Log.AppendFolder("Checking all the rows in the list of layout.")
      Indicator.PushText("Checking all the rows in the list of layout.")
    
      Set TableList = HTML.FindChildMethods.FromParent_Proximity1(objDialog, "idStr", "qadLDLayoutList", 2)

      Dim i, TableValues

      TableValues = SLDParseTable(TableList)

      Log.AppendFolder("Validation the active column of each item")
        For i = 0 To UBound(TableValues)
          ActiveColumnChecking(TableValues(i))
        Next
      Log.PopLogFolder

      Indicator.PopText
    Log.PopLogFolder
      
End sub

'===============================================================================
' Sub: ActiveColumnChecking
'   Checking the absence of values and duplication "Yes".
' 
' Description:
'   Checking the absence of values and duplication "Yes".
' 
' Parameters:
'   Array - arrTBody : array of the rows in TBODY.
'
'===============================================================================
Sub ActiveColumnChecking(arrTBody)

  Dim i, tempActive
  
  checkEr = false
  tempActive = "No"

  For i = 1 to UBound(arrTBody, 1)
    ' Check for the absence of value.
    If arrTBody(i, 2) <> "" Then
      ' Check for duplicate "Yes".
      If arrTBody(i, 2) = "Yes" Then
        if tempActive = "Yes" Then
          checkEr = true
          Exit For
        Else
          tempActive = "Yes"
        End if
      End If
    Else
      checkEr = true
      Exit For
    End If
  Next
  
  ' Check for at least one Yes-active in "System".
  If (arrTBody(0, 0) = "System") and (tempActive = "No") Then
    checkEr = true
    Log.Warning("All System layouts are inactive.")
  End if

  If checkEr = true Then
    Log.Warning(arrTBody(0, 0) & " is FAIL")
  Else
    Log.Checkpoint(arrTBody(0, 0) & " is DONE")
  End If

End Sub

'===============================================================================
' Function: SLDParseTable
'   Parse TABLE
' 
' Parameters:
'   Object - objTable : TABLE object
' 
' Returns: 
'   Array(Array(n,2), Array(n,2)... ) - array of arrays TBODY.
'===============================================================================
Function SLDParseTable(objTable)

  Dim i
  ReDim TableValues(objTable.tBodies.length - 1)
  ' Parses the TBODY elements
  For i = 0 To objTable.tBodies.length - 1
    TableValues(i) = SLDParseTableBody(objTable.tBodies.item(i))
  Next

  SLDParseTable = TableValues
  
End Function

'===============================================================================
' Function: SLDParseTableBody
'   Parse TBODY
' 
' Parameters:
'   Object - objTableBody : TBODY object
' 
' Returns: 
'   Array(n,2) - array of all the rows in TBODY object.
'===============================================================================
Function SLDParseTableBody(objTableBody)
  
  Dim i, j, row
  ReDim TBodyValues(objTableBody.rows.length - 1, 2)
  
  ' Goes through rows
  For i = 0 To objTableBody.rows.length - 1
    ' Obtains a row
    Set row = objTableBody.rows.item(i)
    
    TBodyValues(i, 0) = Trim(row.cells.item(0).innerText)
    if i > 0 Then
      TBodyValues(i, 1) = Trim(row.cells.item(1).innerText)
      TBodyValues(i, 2) = Trim(row.cells.item(2).innerText)
    End if
  Next

  SLDParseTableBody = TBodyValues

End function








' '===============================================================================
' ' Sub: MARowsChecking
' '   Checks all the rows in the list of layout.
' '
' ' Description:
' '   Checks all the rows in the list of layout.
' '
' ' Parameters:
' '   Object -  objDialog : Dialog object
' ' 
' '===============================================================================
' Sub MARowsChecking(objDialog)
  
'   On Error Resume Next 
'     Log.AppendFolder("Checking all the rows in the list of layout.")
'       Indicator.PushText("Checking all the rows in the list of layout.")
    
'       Set TableList = HTML.FindChildMethods.FromParent_Proximity1(objDialog, "idStr", "qadLDLayoutList", 2)

'       Dim i, arrTableValues

'       arrTableValues = MAParseTable(TableList)

'       Log.AppendFolder("Validation the active column of each item")
'         For i = 0 To UBound(arrTableValues)
'           ActiveColumnChecking(arrTableValues(i))
'         Next
'       Log.PopLogFolder

'       Indicator.PopText
'     Log.PopLogFolder
      
' End sub

' '===============================================================================
' ' Sub: ActiveColumnChecking
' '   Checking the absence of values and duplication "Yes".
' ' 
' ' Description:
' '   Checking the absence of values and duplication "Yes".
' ' 
' ' Parameters:
' '   Array - arrTBody : array of the rows in TBODY.
' '
' '===============================================================================
' Sub ActiveColumnChecking(arrTBody)

'   Dim i, tempActive
  
'   bolCheckEr = false
'   bolTempActive = false

'   For i = 1 to UBound(arrTBody, 1) - 1
'     If TypeName(arrTBody(i, 0)) = "Boolean" Then
'       ' Check for duplicate active layout.
'       If arrTBody(i, 0) = true Then
'         if bolTempActive = true Then
'           bolCheckEr = true
'           Exit For
'         Else
'           bolTempActive = true
'         End if
'       End If
'     Else
'       bolCheckEr = true
'       Exit For
'     End If
'   Next
  
'   ' Check for at least one Yes-active in "System".
'   If (arrTBody(0, 0) = "System") and (bolTempActive = true) Then
'     bolCheckEr = true
'   End if

'   If bolCheckEr = true Then
'     Log.Warning(arrTBody(0, 0) & " is FAIL")
'   Else
'     Log.Checkpoint(arrTBody(0, 0) & " is DONE")
'   End If

' End Sub

' '===============================================================================
' ' Function: MAParseTable
' '   Parse TABLE
' ' 
' ' Parameters:
' '   Object - objTable : TABLE object
' ' 
' ' Returns: 
' '   Array(Array(n,2), Array(n,2)... ) - array of arrays TBODY.
' '===============================================================================
' Function MAParseTable(objTable)

'   ReDim arrTableValues(objTable.tBodies.length - 1)
'   ' Parses the TBODY elements
'   For i = 0 To objTable.tBodies.length - 1
'     strCatName = objTable.tBodies.item(i).rows.item(0).cells.item(0).innerText
'     Log.Message(strCatName)
'     arrTableValues(i) = MAParseTableBody(objTable.tBodies.item(i))
'   Next

'   MAParseTable = arrTableValues
  
' End Function

' '===============================================================================
' ' Function: MAParseTableBody
' '   Parse TBODY
' ' 
' ' Parameters:
' '   Object - objTableBody : TBODY object
' ' 
' ' Returns: 
' '   Array(n,2) - array of all the rows in TBODY object.
' '===============================================================================
' Function MAParseTableBody(objTableBody)
  
'   ReDim TBodyValues(objTableBody.rows.length - 1, 2)
  
'   ' Goes through rows
'   For i = 1 To objTableBody.rows.length - 1
'     ' Obtains a row
'     Set objRow = objTableBody.rows.item(i)
    
'     TBodyValues(i, 0) = objRow.cells.item(0).firstElementChild.checked
'     TBodyValues(i, 1) = Trim(objRow.cells.item(1).innerText)
'     TBodyValues(i, 2) = Trim(objRow.cells.item(2).innerText)
'   Next

'   MAParseTableBody = TBodyValues

' End function